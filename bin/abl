#!/usr/bin/env perl

use strict;
use warnings;
use autodie;
use Readonly;
use Carp;
use English qw( -no_match_vars );
use App::Able::Schema qw();
use App::Able;
use Cwd qw();
use Data::Dumper;
use Data::Section -setup;
use File::Util qw(:all);
use File::Spec;
use File::Copy;
use File::Basename;
use File::ShareDir qw(:ALL);
use Getopt::Long;
use Config::YAML;
use Git::Repository;
use Pod::Usage qw();
use Try::Tiny;
use Carp qw(croak);
use Term::ANSIColor 4.00 qw(color);

our $VERSION;

Readonly my $SCREEN_WIDTH => 80;
Readonly my $ATTRIBUTES   => "bold dark italic underline blink concealed";
Readonly my $COLORS       => "black red green yellow blue magenta cyan white";
Readonly my $ABL_PATH     => $ENV{"ABL_PATH"} || $ENV{"HOME"} . "/.abl";
Readonly my $ABL_PATH_RC  => $ABL_PATH . "/ablrc";
Readonly my $ABL_PATH_DB  => $ABL_PATH . "/abldb";

# Parse the command action.
my $action = shift(@ARGV);
if ( !defined($action) || $action eq q{} ) {
    usage();
}

# Parse command-line options.
my $project_name = "MyAblProject";
my $name;
my $author;
my $email;
my $framework;
my $plan;
my $env;
my $webserver;
my $port;

Getopt::Long::GetOptions(
    'name=s'      => \$name,
    'author=s'    => \$author,
    'email=s'     => \$email,
    'framework=s' => \$framework,
    'plan=s'      => \$plan,
    'env=s'       => \$env,
    'webserver=s' => \$webserver,
    'port=i'      => \$port,
);

if ( defined($action) && $action eq "create" ) {
    $name ||= $project_name;
}

# Verify user Configuration and DB existence
if ( not -d $ABL_PATH ) {
    croak "Found a file named $ABL_PATH. It shoud be a directory. This tool will not work with this.";
}
if ( not -e $ABL_PATH ) {
    mkdir $ABL_PATH;
}

if ( not -e $ABL_PATH_RC ) {
    create_config();
}

if ( not -e $ABL_PATH_DB ) {
    create_db();
}

# Load minion for bots
my $minion =
  Minion->new(
  SQLite => 'sqlite:'.$ABL_PATH_DB.'/db_default.db' );
$able->setup_bot($minion);

$able->bot(
  [
    {
      id   => 'mojo',
      tool => 'Project',
      run =>
        '',    # external command
      autorun => 1,
    },
);
# TODO Parse configuration
my $c = Config::YAML->new(
    config => $ABL_PATH . "/ablrc",
    foo    => "abc",
    bar    => "xyz",
    baz    => [ 1, 2, 0 ],
);

# Load db
my $db = {};

# The app
my $able = App::Able->new(
    config => $c,
    db     => $db,
);
my $schema = App::Able::Schema->connect( 'dbi:SQLite:' . $ABL_PATH . "/abldb" );
$able->setup_model($schema);

# List of supported bots we'll need to set up.
my $supported_bots = $App::Able::BOTS;

# Actions.
my $actions = {
    help      => \&usage,
    setup     => \&setup,
    list      => \&list,
    uninstall => \&uninstall,
    version   => \&version,
    create    => \&create,
    info      => \&info,
    run       => \&run,
    stop      => \&stop,
    plan      => \&plan,
    verify    => \&verify,
    pack      => \&make_pack,
    configure => \&make_configure,
    release   => \&release,
    monitor   => \&monitor,
    usage     => \&usage,
    edit      => \&edit,
    delete    => \&delete,
};

if ( !defined( $actions->{$action} ) ) {
    usage("The action '$action' is not valid.");
    exit(0);
}

$actions->{$action}();

exit(0);

sub create_config {
    my $filename = $ABL_PATH . "/ablrc";
    open my $CFHANDLE, ">", $filename or croak "touch $filename: $ERRNO\n";
    close $CFHANDLE;
    my $conf = Config::YAML->new(
        config => $filename,
        output => $filename,
        foo    => "abc",
        bar    => "xyz",
        baz    => [ 1, 2, 0 ],
    );
    $conf->write;
    return $CFHANDLE;
}

sub create_db {
    my $filename = $ABL_PATH . "/abldb";
    my $dbfile = module_file( 'App::Able', 'db_default.db' );
    copy( $dbfile, $filename )
      or croak "Cant create db file: $ERRNO" . dirname(__FILE__) . $dbfile;
    return $dbfile;
}

sub usage {
    my ($message) = @_;
    if ( defined($message) ) {
        chomp($message);
    }
    $message //= "Setup utility for App::Able.";
    $message = "\n$message\n";

    Pod::Usage::pod2usage(
        {
            -message  => $message,
            -exitval  => 'NOEXIT',
            -verbose  => 99,
            -sections => [
                qw(
                  SYNOPSIS
                  COMMANDS
                  OPTIONS
                  )
            ],
        }
    );
    print color('bold blue');
    print " ====== abl is the command line utility for App::Able =====\n";
    print color('reset');

    exit(0);
}

sub uninstall {
    my $bots_directory = get_bots_directory();

    foreach my $bot_name ( @{$supported_bots} ) {
        my $bot_filename = File::Spec->catfile( $bots_directory, $bot_name );
        unlink($bot_filename);
    }

    print "The  bots have been uninstalled successfully.\n";

    return;
}

sub setup {
    print color('bold blue');
    print " ====== abl setup still not implemented =====\n";
    print color('reset');
    return;
}

sub create {
    my $id;;
    my $dirname = lc ( escape_filename ($name, ) );
    $dirname =~ s/[ ]/\_/xmsg;
    # Register project in DB
    my $buid = 1; # TODO Business Model not implemented
    $id = $able->{Project}->create({ buid=>$buid, name=>$name })->id; 
    print color('bold blue');
    print " ====== Creating a new project =====\n";
    print "project name: "      . $name . "\n";
    print "project id: "        . $id . "\n";
    print "project author: "    . $author . "\n";
    print "project email: "     . $email . "\n";
    print "project framework: " . $framework . "\n";
    print color('reset');
    # Select and run framework bootstrap
    # options: dzil, mojo
    # TODO: 6pm (Perl6)
    # TODO: npm (js), webpack (js), yarn(js), composer (PHP), 
    # TODO: pip (Python), bundler (ruby), go, cmake (C, C++), Gradle (C++, Java)
    # TODO: NuGet (M$), YO (multiple), Docker (multiple)
    my $cmd;
    if ($framework eq "dzil"){
      # launch bot dzil
      # 
      $cmd = "dzil new $name";
      # call a dzil process
      system $cmd
         and croak "Couldn't run: $cmd ($OS_ERROR)";
    } elsif ($framework eq "mojo") {
      $cmd = "mojo generate lite_app $dirname.app";
      mkdir $dirname;
      chdir $dirname;
      system $cmd
         and croak "Couldn't run: $cmd ($OS_ERROR)";
      chdir "../";
    }
    # Create the plan (create default skeleton or read from command line)
    return $id;
}

sub info {
    print color('bold blue');
    print " ====== Projec info: =====\n";
    print color('reset');
    return;
}

sub run {
    print color('bold blue');
    print " ====== Running bot =====\n";
    print color('reset');
    return;
}

sub stop {
    print color('bold blue');
    print " ====== Creating a new project =====\n";
    print color('reset');
    return;
}

sub plan {
    print color('bold blue');
    print " ====== Creating plan  =====\n";
    print color('reset');
    return;
}

sub verify {
    print color('bold blue');
    print " ====== Testing =====\n";
    print color('reset');
    return;
}

sub make_pack {
    print color('bold blue');
    print " ====== Packing =====\n";
    print color('reset');
    return;
}

sub make_configure {
    print color('bold blue');
    print " ====== Configuring =====\n";
    print color('reset');
    return;
}

sub release {
    print color('bold blue');
    print " ====== Releasing =====\n";
    print color('reset');
    return;
}

sub monitor {
    print color('bold blue');
    print " ====== Monitoring =====\n";
    print color('reset');
    return;
}

sub edit {
    print color('bold blue');
    print " ====== Edit =====\n";
    print color('reset');
    return;
}

sub delete_project {
    print color('bold blue');
    print " ====== Delete =====\n";
    print color('reset');
    return;
}

=commented

	my $bots_directory = get_bots_directory();

	# Retrieve the bot template.
	my $bot_template_ref = __PACKAGE__->section_data( 'bot_template' );
	my $template = $$bot_template_ref;
	$template =~ s/\Q{{perl}}\E/$^X/g;

	my $errors = 0;
	foreach my $bot_name ( @$supported_bots )
	{
		my $bot_content = $template;
		$bot_content =~ s/\Q{{name}}\E/$bot_name/g;

		my $bot_filename = File::Spec->catfile( $bots_directory, $bot_name );

		try
		{
			# Write the bot file.
			open( my $bot_fh, '>', $bot_filename );
			print $bot_fh $bot_content;
			close( $bot_fh );

			# Make the bot file executable.
			chmod oct( $chmod ), $bot_filename;
		}
		catch
		{
			$errors++;
			print "Unable to set up bot file for $bot_name, skipped: $_\n";
		};
	}

	print $errors > 0
		? 'Some errors occurred when installing the  bots, please try again.'
		: 'The  bots have been installed successfully.';
	print "\n";

=cut

sub version {
    print "Using App::Able version $App::Able::VERSION.\n";

    # Instantiate an object, but we're not using any bot-dependent features
    # (yet) in this function, so any bot name will do here.
    #my $app = App::Able->new(
    #	name => 'pre-commit',
    #);

=comment do we need plugins?

	# Retrieve all the plugins available.
	my @plugins =
		sort keys
		(
			%{{
				map { $_ => 1 }
				map { @$_ }
				values %{ $app->get_all_plugins() || {} }
			}}
		);

	# Display plugin versions.
	if ( scalar( @plugins ) != 0 )
	{
		print "\n";
		print "Plugins:\n";
		foreach my $plugin_name ( @plugins )
		{
			printf(
				"  - %s: v%s\n",
				$plugin_name,
				$plugin_name->VERSION(),
			);
		}
	}

=cut

    exit(0);

    #return;
}

sub list {

=commented

	# Instantiate an object, but we're not using any bot-dependent features
	# (yet) in this function, so any bot name will do here.
	my $app = App::Able->new(
		name => 'pre-commit',
	);

	# Retrieve all the plugins available.
	my $all_plugins = $app->get_all_plugins();

	# Display the list of plugins by bot.
	print "\n";
	if ( scalar( keys %$all_plugins ) == 0 )
	{
		print "No plugins installed!\n";
	}
	else
	{
		foreach my $bot_name ( keys %$all_plugins )
		{
			print "Plugins active for $bot_name:\n";
			foreach my $plugin_name ( @{ $all_plugins->{ $bot_name } } )
			{
				print "    - $plugin_name\n";
			}
			print "\n";
		}
	}

=cut

    return;
}

sub get_bots_directory {

    # read from config
}

=commented	

	# Make sure we're in a  repository.
	my $current_directory = Cwd::getcwd();
	my $repository = Git::Repository->new( work_tree => $current_directory );

	die "The command '$action' requires being in a  repository, which $current_directory is not.\n"
		if !defined( $repository );

	# Find out the  repository, as the bots directory will be directly under
	# that path.
	my $_directory = $repository->_dir();
	die "Could not determine  directory for the repository in $current_directory.\n"
		if !defined( $_directory );

	return File::Spec->catfile( $_directory, 'bots' );

=cut

=head1 NAME

abl - Command line app for App::Able


=head1 VERSION

Version 0.0.1

=head2 SYNOPSIS

	abl <command> [filters] [options]


=head1 DESCRIPTION

This command line "abl" allows working with the Agile Methodology.

The module App::Able is used to call and trigger bots properly.


=head1 USAGE

abl is a command line tool covering almost all phases of the DevOps process.

An author should begin a project with a command similar to:

    abl create --name TestProject \
               --author "Ricardo Filipo" \
               --email monsenhor@cpan.org \
               --framework mojo\
               --plan "My test project works"

=head1 OPTIONS

=over 4

=item * C<--verbose> - Show all steps when running a project 

=back


=head1 COMMANDS

=over 4

=item * C<help> - Show the commands available.

=item * C<info> - Show information about a project.

=item * C<edit> - Edit a project.

=item * C<delete_project> - Delete a project.

=item * C<run> - Run a project.

=item * C<stop> - Stop a project.

=item * C<list> - List the projects.

=item * C<version> - Display the version of App::Able in use.

=item * C<setup> - Setup a project, interactivelly, step by step.  Uses the seting up bot (defaults to abl-setup)

=item * C<create> - Create a new project, uses git bot

=item * C<info> - Show all info about a project.

=item * C<run> - Run a bot.

=item * C<stop> - Kill a running bot.

=item * C<plan> - Run the planning bot (defaults to duk)
   
=item * C<verify> - Run the tests bot in the project (defaults to prove)

=item * C<make_pack> - Creates a package with cpan

=item * C<make_configure> - Configures config bot (defaults to rex)

=item * C<release> - Install the project (delaults to cpan)

=item * C<monitor> - Check issues in deployed instances (defaults to ablmom bot)

=back

=head1 REQUIRED ARGUMENTS

=head1 DIAGNOSTICS

=head1 EXIT STATUS

=head1 CONFIGURATION

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES



=head1 BUGS AND LIMITATIONS

Please report any bugs or feature requests through the web interface at
L<https://github.com/kobkob/App-Able/issues/new>.
I will be notified, and then you'll automatically be notified of progress on
your bug as I make changes.




=head1 SUPPORT

You can find documentation for this module with the perldoc command.

	perldoc App::Able


You can also look for information at:

=over

=item * GitHub's request tracker

L<https://github.com/kobkob/App-Able/issues>

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/app-able>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/app-able>

=item * MetaCPAN

L<https://metacpan.org/release/App-Able>

=back


=head1 AUTHOR

L<|https://metacpan.org/author/MONSENHOR>,
C<< <monsenhor at cpan.org> >>.


=head1 LICENSE AND COPYRIGHT

Copyright 2018 Ricardo Filipo.

This code is free software; you can redistribute it and/or modify it under the
same terms as Perl 5 itself.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the LICENSE file for more details.

=cut

__DATA__

__[ bot_template ]__
#!{{perl}}

use strict;
use warnings;

use App::Able;


=head1 NAME

{{name}} - Call App::Able for the {{name}} bot.

=cut

App::Able->run(
	name      => $0,
	arguments => \@ARGV,
);


__END__
